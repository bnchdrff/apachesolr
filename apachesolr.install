<?php

/**
 * @file
 *   Install and related hooks for apachesolr_search.
 */

/**
 * Implements hook_requirements().
 */
function apachesolr_requirements($phase) {
  $requirements = array();
  if ($phase != 'runtime') {
    return $requirements;
  }
  // Ensure translations don't break at install time
  $t = get_t();
  $has_settings = FALSE;
  $id = apachesolr_default_environment();
  $environment = apachesolr_environment_load($id);
  if (!$environment || empty($environment['url'])) {
    $requirements['apachesolr'] = array(
      'title' => $t('Apache Solr'),
      'value' => $t('Missing environment configuration'),
      'description' => $t('Missing or invalid Solr environment record for the default environment ID %id.', array('%id' => $id)),
      'severity' => REQUIREMENT_ERROR,
    );
  }
  else {
    $has_settings = TRUE;
  }

  if ($has_settings) {
    $ping = FALSE;
    try {
      $solr = apachesolr_get_solr($id);
      $ping = @$solr->ping(variable_get('apachesolr_ping_timeout', 4));
      // If there is no $solr object, there is no instance available, so don't continue.
      if (!$ping) {
        throw new Exception(t('No Solr instance available when checking requirements.'));
      }
    }
    catch (Exception $e) {
      watchdog('Apache Solr', nl2br(check_plain($e->getMessage())), NULL, WATCHDOG_ERROR);
    }
    $value = $ping ? $t('Your site has contacted the Apache Solr server.') : $t('Your site was unable to contact the Apache Solr server.');
    $severity = $ping ? REQUIREMENT_OK : REQUIREMENT_ERROR;
    $requirements['apachesolr'] = array(
      'title' => $t('Apache Solr'),
      'value' => $value,
      'description' => $t('Default environment url: <br/> %url',  array('%url' => $environment['url'])),
      'severity' => $severity,
    );
  }

  return $requirements;
}

/**
 * Implements hook_install().
 */
function apachesolr_install() {
  module_load_include('inc', 'apachesolr', 'apachesolr_search.admin');
  module_load_include('module', 'apachesolr', 'apachesolr');
  module_load_include('inc', 'apachesolr', 'apachesolr.index');

  // Create tables.
  drupal_install_schema('apachesolr');

  // Create one MLT block.
  apachesolr_search_mlt_save_block(array('name' => t('More like this')));

  db_insert('apachesolr_environment')
    ->fields(array('env_id' => 'solr', 'name' => 'localhost server', 'url' => 'http://localhost:8983/solr'))
    ->execute();

  // Initialize the queue we will use for processing entities into the Solr index.
  DrupalQueue::get('apachesolr_indexer_entities')->createQueue();

  // Initialize the entities to index. We enable all node types by default
  //$info = entity_get_info('node');
  //$bundles = array_keys($info['bundles']);
  $env_id = apachesolr_default_environment();
  $bundles = content_types();
  apachesolr_index_set_bundles($env_id, 'node', array_keys($bundles));

  drupal_set_message(t('Apache Solr is enabled. Visit the <a href="@settings_link">settings page</a>.', array('@settings_link' => url('admin/settings/apachesolr'))));
}

/**
 * Implements hook_enable().
 */
function apachesolr_enable() {
  module_load_include('inc', 'apachesolr', 'apachesolr.index');
  // Completely build the index table.
  module_load_include('inc', 'apachesolr', 'apachesolr.index');
  $env_id = apachesolr_default_environment();
  apachesolr_index_mark_for_reindex($env_id);
}

/**
 * Implements hook_schema().
 */
function apachesolr_schema() {
  $table = drupal_get_schema_unprocessed('system', 'cache');
  $table['description'] = 'Cache table for apachesolr to store Luke data and indexing information.';
  $schema['cache_apachesolr'] = $table;

  $schema['apachesolr_environment'] = array(
    'description' => 'The Solr search environment table.',
    'export' => array(
      'key' => 'env_id',
      'identifier' => 'name',
      'api' => array(
        'owner' => 'apachesolr',
        'api' => 'default_apachesolr_environments',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'env_id' => array(
        'description' => 'Unique identifier for the environment',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Human-readable name for the server',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
      'url' => array(
        'description' => 'Full url for the server',
        'type' => 'varchar',
        'length' => 1000,
        'not null' => TRUE,
      ),
      'service_class' => array(
        'description' => 'Optional class name to use for connection',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
    ),
    'primary key' => array('env_id'),
  );
  $schema['apachesolr_environment_variable'] = array(
    'description' => 'Variable values for each Solr search environment.',
    'export' => array(
      'key' => 'name',
      'identifier' => 'name',
      'default hook' => 'default_apachesolr_environment_variable',
      'api' => array(
        'owner' => 'apachesolr',
        'api' => 'default_apachesolr_environment_variables',
        'minimum_version' => 1,
        'current_version' => 1,
       ),
     ),
    'fields' => array(
      'env_id' => array(
        'description' => 'Unique identifier for the environment',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The name of the variable.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'value' => array(
        'description' => 'The value of the variable.',
        'type' => 'blob',
        'not null' => TRUE,
        'size' => 'big',
      ),
    ),
    'primary key' => array('env_id', 'name'),
  );

  // Technically the entity system does not require an integer ID.
  // However, documentation mentions :
  // id: The name of the property that contains the primary id of the
  // entity. Every entity object passed to the Field API must have this
  // property and its value must be numeric.

  //Predefine an amount of types that get their own table
  $types = array(
      'other' => 'apachesolr_index_entities',
      'node' => 'apachesolr_index_entities_node',
  );
  foreach ($types as $type) {
    $schema[$type] = array(
      'description' => t('Stores a record of when an entity changed to determine if it needs indexing by Solr.'),
      'fields' => array(
        'entity_type' => array(
          'description' => t('The type of entity.'),
          'type' => 'varchar',
          'length' => 128,
          'not null' => TRUE,
        ),
        'entity_id' => array(
          'description' => t('The primary identifier for an entity.'),
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'bundle' => array(
          'description' => t('The bundle to which this entity belongs.'),
          'type' => 'varchar',
          'length' => 128,
          'not null' => TRUE,
        ),
        'status' => array(
          'description' => t('Boolean indicating whether the entity is visible to non-administrators (eg, published for nodes).'),
          'type' => 'int',
          'not null' => TRUE,
          'default' => 1,
        ),
        'changed' => array(
          'description' => t('The Unix timestamp when an entity was changed.'),
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
      ),
      'indexes' => array(
        'changed' => array('bundle', 'status', 'changed'),
      ),
      'primary key' => array('entity_id'),
    );
    if ($type == 'other') {
      // Need the entity type also in the pkey for multiple entities in one table.
      $schema[$type]['primary key'][] = 'entity_type';
    }
  }

  $schema['apachesolr_index_bundles'] = array(
    'description' => t('Records what bundles we should be indexing for a given environment.'),
    'fields' => array(
      'env_id' => array(
        'description' => t('The name of the environment.'),
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'entity_type' => array(
        'description' => t('The type of entity.'),
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'bundle' => array(
        'description' => t('The bundle to index.'),
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('env_id', 'entity_type', 'bundle'),
  );
  return $schema;
}

/**
 * Implements hook_uninstall().
 * @todo : Remove the blocks with a query
 */
function apachesolr_uninstall() {
  // Remove variables.
  variable_del('apachesolr_default_environment');
  variable_del('apachesolr_rows');
  variable_del('apachesolr_site_hash');
  variable_del('apachesolr_index_last');
  variable_del('apachesolr_search_mlt_blocks');
  variable_del('apachesolr_cron_limit');
  variable_del('apachesolr_failure');
  variable_del('apachesolr_index_updated');
  variable_del('apachesolr_read_only');
  variable_del('apachesolr_set_nodeapi_messages');
  // Remove tables.
  drupal_uninstall_schema('apachesolr');
  // Remove blocks.
  db_query('DELETE FROM {blocks} WHERE module = "apachesolr"');
}
